Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/receiptscanning/ReceiptScanningManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/receiptscanning/ReceiptScanningManager.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/receiptscanning/ReceiptScanningManager.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/receiptscanning/ReceiptScanningManager.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/receiptscanning/ReceiptScanningManager.kt	
@@ -9,6 +9,9 @@
 import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.models.*
 import com.salesforce.loyalty.mobile.sources.forceUtils.ForceAuthenticator
 import com.salesforce.loyalty.mobile.sources.forceUtils.Logger
+import okhttp3.MediaType.Companion.toMediaTypeOrNull
+import okhttp3.RequestBody
+import okhttp3.RequestBody.Companion.toRequestBody
 import retrofit2.HttpException
 
 class ReceiptScanningManager constructor(auth: ForceAuthenticator, instanceUrl: String) {
@@ -30,17 +33,18 @@
 
     suspend fun analyzeExpense(
         membershipNumber: String,
-        encodedImage: String
+        encodedImage: ByteArray
     ): Result<AnalyzeExpenseResponse> {
         Logger.d(TAG, "analyzeExpense()")
 
-
-        val requestBody =
-            AnalyzeExpenseRequest(membershipNumber = membershipNumber, base64image = encodedImage)
+        /*val requestBody =
+            AnalyzeExpenseRequest(membershipNumber = membershipNumber, base64image = encodedImage)*/
+        var requestBody: RequestBody =
+            encodedImage.toRequestBody("image/jpg".toMediaTypeOrNull(), 0, encodedImage.size)
         try {
             val success = receiptClient.receiptApi.analyzeExpense(
                 getAnalyzeExpenseUrl(),
-                requestBody
+                requestBody, membershipNumber
             )
             return Result.success(success)
         } catch (e: HttpException) {
@@ -89,6 +93,18 @@
         )
     }
 
+    suspend fun getReceiptStatus(
+        receiptId: String,
+        membershipNumber: String
+    ): Result<ReceiptListResponse> {
+        Logger.d(TAG, "receiptStatusUpdate()")
+
+
+        return receiptClient.receiptApi.getReceiptStatus(
+            getReceiptListURLSOQLUrl(), fetchReceiptStatusSOQLQuery(membershipNumber, receiptId)
+        )
+    }
+
     private fun getAnalyzeExpenseUrl(): String {
         return mInstanceUrl + ReceiptScanningConfig.RECEIPT_ANALYZE_EXPENSE
     }
@@ -98,7 +114,7 @@
     }
 
     private fun fetchReceiptListSOQLQuery(membershipKey: String): String {
-        return "select Id,Purchase_Date__c,ReceiptId__c,Name,Status__c,StoreName__c,Total_Points__c,TotalAmount__c,Processed_AWS_Response__c from Receipts__c WHERE Loyalty_Program_Member__r.MembershipNumber = '${membershipKey}' Order by CreatedDate DESC"
+        return "select Id,Purchase_Date__c,ReceiptId__c,Name,Status__c,StoreName__c,Total_Points__c,TotalAmount__c,Processed_AWS_Response__c,ImageUrl__c from Receipts__c WHERE Loyalty_Program_Member__r.MembershipNumber = '${membershipKey}' Order by CreatedDate DESC"
     }
 
     private fun getCreateTransactionUrl(): String {
@@ -108,4 +124,8 @@
     private fun getStatusUpdateUrl(): String {
         return mInstanceUrl + ReceiptScanningConfig.RECEIPT_STATUS_UPDATE_URL
     }
+
+    private fun fetchReceiptStatusSOQLQuery(membershipKey: String, receiptId: String): String {
+        return "select Id,Status__c,Total_Points__c from Receipts__c WHERE Loyalty_Program_Member__r.MembershipNumber = '${membershipKey}' AND Id = '${receiptId}'"
+    }
 }
\ No newline at end of file
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ScannedReceipt.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ScannedReceipt.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ScannedReceipt.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ScannedReceipt.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ScannedReceipt.kt	
@@ -23,21 +23,29 @@
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavHostController
+import com.google.gson.Gson
 import com.salesforce.loyalty.mobile.MyNTORewards.R
+import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.api.ReceiptScanningConfig
 import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.models.AnalyzeExpenseResponse
 import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.models.LineItem
 import com.salesforce.loyalty.mobile.myntorewards.ui.theme.LighterBlack
 import com.salesforce.loyalty.mobile.myntorewards.ui.theme.MyProfileScreenBG
 import com.salesforce.loyalty.mobile.myntorewards.ui.theme.VibrantPurple40
 import com.salesforce.loyalty.mobile.myntorewards.ui.theme.font_sf_pro
+import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants
 import com.salesforce.loyalty.mobile.myntorewards.utilities.Common
+import com.salesforce.loyalty.mobile.myntorewards.utilities.CommunityMemberModel
 import com.salesforce.loyalty.mobile.myntorewards.utilities.ReceiptScanningBottomSheetType
 import com.salesforce.loyalty.mobile.myntorewards.utilities.TestTags.Companion.TEST_TAG_RECEIPT_TABLE_SCREEN
 import com.salesforce.loyalty.mobile.myntorewards.utilities.TestTags.Companion.TEST_TAG_ROW_STORE_DETAILS
 import com.salesforce.loyalty.mobile.myntorewards.utilities.TestTags.Companion.TEST_TAG_TRY_AGAIN_SCANNED_RECEIPT
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.blueprint.ScanningViewModelInterface
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.CreateTransactionJournalViewState
+import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.ReceiptStatusUpdateViewState
+import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.UploadRecieptCancelledViewState
 import com.salesforce.loyalty.mobile.myntorewards.views.navigation.MoreScreens
+import com.salesforce.loyalty.mobile.sources.PrefHelper
+import com.salesforce.loyalty.mobile.sources.forceUtils.Logger
 
 @Composable
 fun ShowScannedReceiptScreen(
@@ -45,11 +53,16 @@
     scanningViewModel: ScanningViewModelInterface,
     analyzeExpenseResponse: AnalyzeExpenseResponse?,
     closePopup: () -> Unit,
-    openCongratsPopup: (popupStatus: ReceiptScanningBottomSheetType) -> Unit
+    openCongratsPopup: (popupStatus: ReceiptScanningBottomSheetType) -> Unit,
+    setTotalPoints: (totalPoints: String?) -> Unit
 ) {
     var congPopupState by remember { mutableStateOf(false) }
+    var submissionTryAgainState by remember { mutableStateOf(false) }
     val createTransactionJournalViewState by scanningViewModel.createTransactionJournalViewStateLiveData.observeAsState()
+    val cancelSubmissionViewState by scanningViewModel.cancellingSubmissionLiveData.observeAsState()
+    val receiptStatusUpdateViewState by scanningViewModel.receiptStatusUpdateViewStateLiveData.observeAsState()
     var inProgress by remember { mutableStateOf(false) }
+    var statusUpdateInProgress by remember { mutableStateOf(false) }
     val itemLists = analyzeExpenseResponse?.lineItems
     val context: Context = LocalContext.current
     Box() {
@@ -144,11 +157,7 @@
                             TEST_TAG_TRY_AGAIN_SCANNED_RECEIPT
                         )
                         .clickable {
-                            closePopup()
-                            navHostController.popBackStack(
-                                MoreScreens.CaptureImageScreen.route,
-                                false
-                            )
+                            submissionTryAgainState= true
                         },
                     textAlign = TextAlign.Center,
                     fontSize = 16.sp,
@@ -166,11 +175,47 @@
                 }
             }
         }
+        if (submissionTryAgainState) {
+            submissionTryAgainState = false
+            LaunchedEffect(key1 = true) {
+                analyzeExpenseResponse?.let {
+                    it.receiptId?.let { it1 -> scanningViewModel.cancellingSubmission(it1) }
+                }
+            }
+        }
+        when (receiptStatusUpdateViewState) {
+            is ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess -> {
+                if (statusUpdateInProgress) {
+                    statusUpdateInProgress = false
+                    val totalPoint = (receiptStatusUpdateViewState as ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess).points
+                    setTotalPoints(totalPoint)
+                    openCongratsPopup(ReceiptScanningBottomSheetType.POPUP_CONGRATULATIONS)
+                }
+            }
+            ReceiptStatusUpdateViewState.ReceiptStatusUpdateFailure -> {
+                if (statusUpdateInProgress) {
+                    statusUpdateInProgress = false
+                    openCongratsPopup(ReceiptScanningBottomSheetType.POPUP_CONGRATULATIONS)
+                }
+            }
+            ReceiptStatusUpdateViewState.ReceiptStatusUpdateInProgress -> {
+                statusUpdateInProgress = true
+            }
+            else -> {}
+        }
         when (createTransactionJournalViewState) {
             CreateTransactionJournalViewState.CreateTransactionJournalSuccess -> {
                 if (inProgress) {
                     inProgress = false
-                    openCongratsPopup(ReceiptScanningBottomSheetType.POPUP_CONGRATULATIONS)
+                    LaunchedEffect(key1 = true ) {
+                        analyzeExpenseResponse?.receiptId?.let {
+                            getUpdatedReceiptStatus(
+                                context,
+                                receiptId = it,
+                                scanningViewModel
+                            )
+                        }
+                    }
                 }
             }
             CreateTransactionJournalViewState.CreateTransactionJournalInProgress -> {
@@ -183,7 +228,35 @@
             }
             else -> {}
         }
-        if (inProgress) {
+
+        when (cancelSubmissionViewState) {
+            UploadRecieptCancelledViewState.UploadRecieptCancelledSuccess -> {
+                if (inProgress) {
+                    inProgress = false
+                       closePopup()
+                            navHostController.popBackStack(
+                                MoreScreens.CaptureImageScreen.route,
+                                false
+                            )
+                }
+            }
+            UploadRecieptCancelledViewState.UploadRecieptCancelledInProgress-> {
+                inProgress = true
+            }
+            UploadRecieptCancelledViewState.UploadRecieptCancelledFailure -> {
+                if (inProgress) {
+                    inProgress = false
+                    closePopup()
+                    navHostController.popBackStack(
+                        MoreScreens.CaptureImageScreen.route,
+                        false
+                    )
+                }
+            }
+            else -> {}
+        }
+
+        if (inProgress || statusUpdateInProgress) {
             CircularProgressIndicator(
                 modifier = Modifier
                     .fillMaxSize(0.1f)
@@ -198,3 +271,23 @@
 fun ScannedPreview(){
     ShowScannedReceiptPopup()
 }*/
+
+private fun getUpdatedReceiptStatus(
+    context: Context,
+    receiptId: String,
+    scanningViewModel: ScanningViewModelInterface
+) {
+    val memberJson =
+        PrefHelper.customPrefs(context)
+            .getString(AppConstants.KEY_COMMUNITY_MEMBER, null)
+    if (memberJson == null) {
+    }
+    val member = Gson().fromJson(memberJson, CommunityMemberModel::class.java)
+    val membershipKey = member.membershipNumber ?: ""
+    scanningViewModel.getReceiptStatus(
+        receiptId = receiptId,
+        membershipKey,
+        maxRetryCount = ReceiptScanningConfig.RECEIPT_STATUS_MAX_RETRY_COUNT,
+        delaySeconds = ReceiptScanningConfig.RECEIPT_STATUS_FETCH_DELAY.toLong()
+    )
+}
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImagePreviewScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImagePreviewScreen.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImagePreviewScreen.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImagePreviewScreen.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImagePreviewScreen.kt	
@@ -2,7 +2,6 @@
 
 import android.graphics.Bitmap
 import android.util.Base64
-import android.util.Log
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
@@ -238,11 +237,11 @@
                 capturedImageBitmap?.asAndroidBitmap()?.let {
                     it.compress(Bitmap.CompressFormat.JPEG, 100, baos)
                     val b: ByteArray = baos.toByteArray()
-                    val encImage: String = Base64.encodeToString(b, Base64.NO_WRAP)
-                    Log.d("ImageCaptureScreen", "Encoded image: $encImage")
+//                    val encImage: String = Base64.encodeToString(b, Base64.NO_WRAP)
+//                    Log.d("ImageCaptureScreen", "Encoded image: $encImage")
                     val context = LocalContext.current
                     LaunchedEffect(key1 = true) {
-                        scanningViewModel.analyzeExpense(context, encImage)
+                        scanningViewModel.analyzeExpense(context, b)
                     }
                 }
                 processClicked = false
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptDetail.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptDetail.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptDetail.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptDetail.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptDetail.kt	
@@ -1,9 +1,13 @@
 package com.salesforce.loyalty.mobile.myntorewards.views.receipts
 
 import android.content.Context
+import android.graphics.Bitmap
+import android.graphics.drawable.Drawable
+import android.widget.Toast
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
+import androidx.compose.foundation.gestures.detectTransformGestures
 import androidx.compose.foundation.interaction.MutableInteractionSource
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.shape.RoundedCornerShape
@@ -20,7 +24,12 @@
 import androidx.compose.ui.ExperimentalComposeUiApi
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.blur
+import androidx.compose.ui.draw.clip
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.RectangleShape
+import androidx.compose.ui.graphics.asImageBitmap
+import androidx.compose.ui.graphics.graphicsLayer
+import androidx.compose.ui.input.pointer.pointerInput
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalSoftwareKeyboardController
@@ -31,7 +40,20 @@
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
+import androidx.core.graphics.drawable.toBitmap
 import androidx.navigation.NavHostController
+import androidx.swiperefreshlayout.widget.CircularProgressDrawable
+import coil.compose.AsyncImage
+import coil.memory.MemoryCache
+import coil.request.ImageRequest
+import com.bumptech.glide.Glide
+import com.bumptech.glide.integration.compose.ExperimentalGlideComposeApi
+import com.bumptech.glide.integration.compose.GlideImage
+import com.bumptech.glide.load.DataSource
+import com.bumptech.glide.load.engine.GlideException
+import com.bumptech.glide.request.RequestListener
+import com.bumptech.glide.request.target.CustomTarget
+import com.bumptech.glide.request.transition.Transition
 import com.google.gson.Gson
 import com.salesforce.loyalty.mobile.MyNTORewards.R
 import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.api.ReceiptScanningConfig.RECEIPT_STATUS_MANUAL_REVIEW
@@ -41,6 +63,7 @@
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.TAB_ELIGIBLE_ITEM
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.TAB_ORIGINAL_RECEIPT_IMAGE
 import com.salesforce.loyalty.mobile.myntorewards.utilities.Common.Companion.formatReceiptDetailDate
+import com.salesforce.loyalty.mobile.myntorewards.utilities.LocalFileManager
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.ReceiptListScreenPopupState
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.blueprint.ScanningViewModelInterface
 import com.salesforce.loyalty.mobile.myntorewards.views.navigation.ReceiptTabs
@@ -64,6 +87,8 @@
         navController.previousBackStackEntry?.arguments?.getString(AppConstants.KEY_RECEIPT_STATUS)
     val totalPoints =
         navController.previousBackStackEntry?.arguments?.getString(AppConstants.KEY_RECEIPT_TOTAL_POINTS)
+    val imageUrl =
+        navController.previousBackStackEntry?.arguments?.getString(AppConstants.KEY_RECEIPT_IMAGE_URL)
     var isSubmittedForManualReview by remember {
         mutableStateOf(
             receiptStatus.equals(
@@ -111,6 +136,8 @@
             }
         }
     }
+
+    val bitmap = remember { mutableStateOf<Bitmap?>(null) }
     androidx.compose.material.BottomSheetScaffold(
         scaffoldState = bottomSheetScaffoldState,
 
@@ -220,7 +247,14 @@
                             modifier = Modifier
                         )
                         if (receiptStatus != null) {
-                            ReceiptStatusText(totalPoints, receiptStatus)
+                            if (isSubmittedForManualReview) {
+                                ReceiptStatusText(
+                                    totalPoints = totalPoints,
+                                    status = RECEIPT_STATUS_MANUAL_REVIEW
+                                )
+                            } else {
+                                ReceiptStatusText(totalPoints, receiptStatus)
+                            }
                         }
                     }
                 }
@@ -298,14 +332,11 @@
                             ReceiptDetailTable(itemLists = itemLists)
                     }
                     TAB_ORIGINAL_RECEIPT_IMAGE -> {
-                        Image(
-                            painter = painterResource(id = R.drawable.receipt_dummy),
-                            contentDescription = "image description",
-                            contentScale = ContentScale.FillHeight,
-                            modifier = Modifier
-                                .height(280.dp)
-                                .align(Alignment.CenterHorizontally)
-                        )
+                        if (imageUrl != null) {
+                            ZoomableImage(imageUrl) {
+                                bitmap.value = it
+                            }
+                        }
                     }
                 }
             }
@@ -354,7 +385,31 @@
                             fontWeight = FontWeight(400),
                             color = LighterBlack,
                             textAlign = TextAlign.Center
-                        )
+                        ),
+                        modifier = Modifier.clickable(
+                            interactionSource = interactionSource,
+                            indication = null
+                        ) {
+                            bitmap.value?.let { bitmapValue ->
+                                val success = LocalFileManager.saveImage(
+                                    context,
+                                    bitmapValue
+                                )
+                                if (success) {
+                                    Toast.makeText(
+                                        context,
+                                        "Downloaded image successfully!",
+                                        Toast.LENGTH_LONG
+                                    ).show()
+                                } else {
+                                    Toast.makeText(
+                                        context,
+                                        "Download failed",
+                                        Toast.LENGTH_LONG
+                                    ).show()
+                                }
+                            }
+                        }
                     )
                 }
             }
@@ -363,4 +418,77 @@
 
 
 
-}
\ No newline at end of file
+}
+
+@OptIn(ExperimentalGlideComposeApi::class)
+@Composable
+fun ZoomableImage(imageUrl: String, setImageBitmap: (Bitmap) -> Unit) {
+    Column(
+        verticalArrangement = Arrangement.Center,
+        horizontalAlignment = Alignment.CenterHorizontally,
+        modifier = Modifier
+            .fillMaxSize()
+            .clip(RectangleShape)
+    ) {
+        var zoomBy by remember { mutableStateOf(1f) }
+        var x by remember { mutableStateOf(0f) }
+        var y by remember { mutableStateOf(0f) }
+        val min = 1f
+        val max = 3f
+        val circularProgressDrawable = CircularProgressDrawable(LocalContext.current)
+        circularProgressDrawable.strokeWidth = 5f
+        circularProgressDrawable.centerRadius = 30f
+        circularProgressDrawable.start()
+
+        GlideImage(
+            model = imageUrl,
+            contentScale = ContentScale.Fit,
+            contentDescription = stringResource(id = R.string.receipt_tab_receipt_image),
+            modifier = Modifier
+                .fillMaxSize()
+                .graphicsLayer(
+                    scaleX = zoomBy,
+                    scaleY = zoomBy,
+                    translationX = x,
+                    translationY = y,
+                )
+                .pointerInput(Unit) {
+                    detectTransformGestures(
+                        onGesture = { _, pan, gestureZoom, _ ->
+                            zoomBy = (zoomBy * gestureZoom).coerceIn(min, max)
+                            if (zoomBy > 1) {
+                                x += pan.x * zoomBy
+                                y += pan.y * zoomBy
+                            } else {
+                                x = 0f
+                                y = 0f
+                            }
+
+                        })
+                }) {
+            it.placeholder(circularProgressDrawable)
+                .addListener(object : RequestListener<Drawable> {
+                    override fun onLoadFailed(
+                        e: GlideException?,
+                        model: Any?,
+                        target: com.bumptech.glide.request.target.Target<Drawable>?,
+                        isFirstResource: Boolean
+                    ): Boolean {
+                        return false
+                    }
+
+                    override fun onResourceReady(
+                        resource: Drawable?,
+                        model: Any?,
+                        target: com.bumptech.glide.request.target.Target<Drawable>?,
+                        dataSource: DataSource?,
+                        isFirstResource: Boolean
+                    ): Boolean {
+                        resource?.toBitmap()?.let { bitmap -> setImageBitmap(bitmap) }
+                        return false
+                    }
+                })
+                .error(R.drawable.ic_astronaut)
+        }
+    }
+}
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImageCaptureScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImageCaptureScreen.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImageCaptureScreen.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImageCaptureScreen.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ImageCaptureScreen.kt	
@@ -4,22 +4,14 @@
 import android.annotation.SuppressLint
 import android.content.Context
 import android.graphics.Bitmap
-import android.graphics.ImageDecoder
 import android.graphics.Matrix
-import android.net.Uri
 import android.os.Build
 import android.util.Log
-import android.view.ViewGroup
-import android.widget.LinearLayout
-import android.widget.Toast
-import androidx.activity.compose.rememberLauncherForActivityResult
-import androidx.activity.result.contract.ActivityResultContracts
 import androidx.annotation.RequiresApi
 import androidx.camera.core.ImageCapture
 import androidx.camera.core.ImageCaptureException
 import androidx.camera.core.ImageProxy
 import androidx.camera.view.LifecycleCameraController
-import androidx.camera.view.PreviewView
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
@@ -30,23 +22,15 @@
 import androidx.compose.ui.graphics.*
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
-import androidx.compose.ui.platform.LocalLifecycleOwner
 import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.text.TextStyle
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.sp
-import androidx.compose.ui.viewinterop.AndroidView
 import androidx.core.content.ContextCompat
 import androidx.navigation.NavHostController
 import com.google.accompanist.permissions.ExperimentalPermissionsApi
 import com.google.accompanist.permissions.PermissionStatus
 import com.google.accompanist.permissions.rememberPermissionState
 import com.salesforce.loyalty.mobile.MyNTORewards.R
-import com.salesforce.loyalty.mobile.myntorewards.ui.theme.font_sf_pro
-import com.salesforce.loyalty.mobile.myntorewards.utilities.TestTags.Companion.TEST_TAG_CAMERA
 import com.salesforce.loyalty.mobile.myntorewards.utilities.TestTags.Companion.TEST_TAG_CAMERA_SCREEN
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.blueprint.ScanningViewModelInterface
 import com.salesforce.loyalty.mobile.myntorewards.views.myprofile.CameraGalleryPickerAndUI
Index: SampleApps/MyNTORewards/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/res/values/strings.xml b/SampleApps/MyNTORewards/src/main/res/values/strings.xml
--- a/SampleApps/MyNTORewards/src/main/res/values/strings.xml	
+++ b/SampleApps/MyNTORewards/src/main/res/values/strings.xml	
@@ -148,7 +148,8 @@
     <string name="scanning_congrats">Your receipt is uploaded!</string>
     <string name="scanning_congrats_background">Congratulations Screen Background</string>
     <string name="scanning_congrats_gift_icon">Congrats Gift Icon</string>
-    <string name="scanning_congrats_subtitle">We’ve credited {count} points for the uploaded receipt.</string>
+    <string name="scanning_congrats_subtitle">We’ve credited %s points for the uploaded receipt.</string>
+    <string name="scanning_receipt_subtitle_no_points">Stay tuned as we update the Loyalty points for the eligible items of the receipt.</string>
     <string name="scanning_done">Done</string>
     <string name="scan_another_receipt">Upload Another Receipt</string>
     <string name="scan_progress_indicator">Generating preview…</string>
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptsList.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptsList.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptsList.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptsList.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ReceiptsList.kt	
@@ -49,6 +49,7 @@
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.KEY_PROCESSED_AWS_RESPONSE
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.KEY_RECEIPT_ID
+import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.KEY_RECEIPT_IMAGE_URL
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.KEY_RECEIPT_STATUS
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.KEY_RECEIPT_TOTAL_POINTS
 import com.salesforce.loyalty.mobile.myntorewards.utilities.Common.Companion.formatReceiptListDate
@@ -247,6 +248,10 @@
                     KEY_RECEIPT_STATUS,
                     receipt.receipt_status
                 )
+                navController.currentBackStackEntry?.arguments?.putString(
+                    KEY_RECEIPT_IMAGE_URL,
+                    receipt.imageUrl
+                )
                 navController.navigate(MoreScreens.ReceiptDetailScreen.route)
             }
     ) {
@@ -260,7 +265,7 @@
             )
             // ToDo purchase date should be formatted
             Text(
-                text = stringResource(R.string.field_date) + " " + formatReceiptListDate(receipt.purchase_date, context),
+                text = stringResource(R.string.field_date) + " " + receipt.purchase_date/*formatReceiptListDate(receipt.purchase_date, context)*/,
                 fontFamily = font_sf_pro,
                 color = Color.Black,
                 textAlign = TextAlign.Start,
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/viewmodels/ScanningViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/viewmodels/ScanningViewModel.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/viewmodels/ScanningViewModel.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/viewmodels/ScanningViewModel.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/viewmodels/ScanningViewModel.kt	
@@ -11,6 +11,7 @@
 import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.models.AnalyzeExpenseResponse
 import com.salesforce.loyalty.mobile.myntorewards.receiptscanning.models.ReceiptListResponse
 import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants
+import com.salesforce.loyalty.mobile.myntorewards.utilities.AppConstants.Companion.RECEIPT_POINT_STATUS_PROCESSED
 import com.salesforce.loyalty.mobile.myntorewards.utilities.CommunityMemberModel
 import com.salesforce.loyalty.mobile.myntorewards.utilities.LocalFileManager
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.blueprint.ScanningViewModelInterface
@@ -18,8 +19,10 @@
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.ReceiptScanningViewState
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.ReceiptStatusUpdateViewState
 import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.ReceiptViewState
+import com.salesforce.loyalty.mobile.myntorewards.viewmodels.viewStates.UploadRecieptCancelledViewState
 import com.salesforce.loyalty.mobile.sources.PrefHelper
 import com.salesforce.loyalty.mobile.sources.forceUtils.Logger
+import kotlinx.coroutines.delay
 import kotlinx.coroutines.launch
 
 class ScanningViewModel(private val receiptScanningManager: ReceiptScanningManager) : ViewModel(),
@@ -51,6 +54,12 @@
 
     private val createTransactionJournalViewState = MutableLiveData<CreateTransactionJournalViewState>()
 
+
+    override val cancellingSubmissionLiveData: LiveData<UploadRecieptCancelledViewState>
+        get() = cancellingSubmissionViewState
+
+    private val cancellingSubmissionViewState = MutableLiveData<UploadRecieptCancelledViewState>()
+
     override val receiptStatusUpdateViewStateLiveData: LiveData<ReceiptStatusUpdateViewState>
         get() = receiptStatusUpdateViewState
 
@@ -111,7 +120,7 @@
         }
     }
 
-    override fun analyzeExpense(context: Context, encodedImage: String): AnalyzeExpenseResponse? {
+    override fun analyzeExpense(context: Context, encodedImage: ByteArray): AnalyzeExpenseResponse? {
         Logger.d(TAG, "analyzeExpense")
         var result: AnalyzeExpenseResponse? = null
         viewModelScope.launch {
@@ -125,6 +134,7 @@
             val member = Gson().fromJson(memberJson, CommunityMemberModel::class.java)
 
             var membershipKey = member.membershipNumber ?: ""
+
             receiptScanningManager.analyzeExpense(membershipKey, encodedImage).onSuccess {
                 Logger.d(TAG, "analyzeExpense Success : $it")
                 scannedReceipt.value= it
@@ -167,7 +177,7 @@
                 comments = comments
             ).onSuccess {
                 Logger.d(TAG, "submitForManualReview Success : $it")
-                receiptStatusUpdateViewState.postValue(ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess)
+                receiptStatusUpdateViewState.postValue(ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess(null))
             }.onFailure {
                 Logger.d(TAG, "submitForManualReview failed: ${it.message}")
                 receiptStatusUpdateViewState.postValue(ReceiptStatusUpdateViewState.ReceiptStatusUpdateFailure)
@@ -193,4 +203,66 @@
             }
         }
     }
+
+    override fun cancellingSubmission(receiptId: String) {
+        Logger.d(TAG, "submitForCancelling")
+        viewModelScope.launch {
+            cancellingSubmissionViewState.postValue(UploadRecieptCancelledViewState.UploadRecieptCancelledInProgress)
+
+            receiptScanningManager.receiptStatusUpdate(
+                receiptId = receiptId,
+                status = ReceiptScanningConfig.RECEIPT_STATUS_CANCELLED,
+                comments = null
+            ).onSuccess {
+                Logger.d(TAG, "cancelSubmission Success : $it")
+                cancellingSubmissionViewState.postValue(UploadRecieptCancelledViewState.UploadRecieptCancelledSuccess)
+            }.onFailure {
+                Logger.d(TAG, "cancelSubmission failed: ${it.message}")
+                cancellingSubmissionViewState.postValue(UploadRecieptCancelledViewState.UploadRecieptCancelledFailure)
+            }
+        }
+    }
+
+    override fun getReceiptStatus(
+        receiptId: String,
+        membershipNumber: String,
+        maxRetryCount: Int,
+        delaySeconds: Long
+    ) {
+        Logger.d(TAG, "getReceiptStatus")
+        viewModelScope.launch {
+            receiptStatusUpdateViewState.postValue(ReceiptStatusUpdateViewState.ReceiptStatusUpdateInProgress)
+            var retryCount = 1
+            var points: String? = null
+            do {
+                delay(delaySeconds)
+                var status: String? = null
+                receiptScanningManager.getReceiptStatus(
+                    receiptId = receiptId, membershipNumber = membershipNumber
+                ).onSuccess {
+                    Logger.d(TAG, "getReceiptStatus Success : $it")
+                    val record = it.records.get(0)
+                    status = record.receipt_status
+                    points = record.total_points?.toString()
+                }.onFailure {
+                    Logger.d(TAG, "getReceiptStatus failed: ${it.message}")
+                    receiptStatusUpdateViewState.postValue(ReceiptStatusUpdateViewState.ReceiptStatusUpdateFailure)
+                }
+                if (status?.equals(RECEIPT_POINT_STATUS_PROCESSED, ignoreCase = true) == true) {
+                    receiptStatusUpdateViewState.postValue(
+                        ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess(
+                            points
+                        )
+                    )
+                    return@launch
+                }
+                retryCount += 1
+            } while (retryCount <= maxRetryCount)
+            receiptStatusUpdateViewState.postValue(
+                ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess(
+                    points
+                )
+            )
+        }
+    }
 }
\ No newline at end of file
Index: SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ManualReview.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ManualReview.kt b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ManualReview.kt
--- a/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ManualReview.kt	
+++ b/SampleApps/MyNTORewards/src/main/java/com/salesforce/loyalty/mobile/myntorewards/views/receipts/ManualReview.kt	
@@ -278,7 +278,7 @@
             }
         }
         when (receiptStatusUpdateViewState) {
-            ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess -> {
+            is ReceiptStatusUpdateViewState.ReceiptStatusUpdateSuccess -> {
                 if (statusUpdateInProgress) {
                     Toast.makeText(
                         LocalContext.current,
